/*
   Generated by EX4-TO-MQ4 decompiler ONE FILE V4.0.218.3
   EX4 ID : 04E20A41724C2645BAEB3FDF008C44EC
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2007, Dean Malone"
#property link      "www.compassfx.com"

#property indicator_separate_window
#property indicator_buffers 7
#property indicator_color1 MediumSeaGreen
#property indicator_color2 Green

#property indicator_color3 Coral
#property indicator_color4 Red

#property indicator_color5 DarkGreen
#property indicator_color6 DarkSlateBlue
#property indicator_color7 CLR_NONE

#property indicator_width1     2
#property indicator_width2     1
#property indicator_width3     2
#property indicator_width4     1

#property indicator_style5     2
#property indicator_style6     2


extern string Custom_Indicator = "Range_Factor";
extern string Copyright = "© 2007, Dean Malone";
extern string Web_Address = "www.compassfx.com";
extern double MyRange  = 0.0;
extern bool   DrawDots = 1;
extern string MyRange_Help = "If MyRange = 0.0 - defaults used (M1=0.01,M5=0.02,M15=0.04,M30=0.06,H1=0.08,H4=0.14,D1=0.4)";
double gd_116;

double g_ibuf_124[];
double g_ibuf_128[];
double g_ibuf_132[];
double gd_136 = 500.0;
double buf_up1[];
double buf_up2[];
double buf_dn1[];
double buf_dn2[];

int init() {
   switch (Period()) {
   case PERIOD_MN1:
      gd_116 = 0.5;
      break;
   case PERIOD_W1:
      gd_116 = 0.5;
      break;
   case PERIOD_D1:
      gd_116 = 0.4;
      break;
   case PERIOD_H4:
      gd_116 = 0.14;
      break;
   case PERIOD_H1:
      gd_116 = 0.08;
      break;
   case PERIOD_M30:
      gd_116 = 0.06;
      break;
   case PERIOD_M15:
      gd_116 = 0.04;
      break;
   case PERIOD_M5:
      gd_116 = 0.02;
      break;
   case PERIOD_M1:
      gd_116 = 0.01;
   }
   if (MyRange != 0.0) gd_116 = MyRange;

  IndicatorShortName("DM Range_Factor:  Lv:"+DoubleToStr(gd_116,2)+"  RF LinearValue: ");// | www.compassfx.com 
  if (DrawDots)
   {
    SetIndexStyle(0, DRAW_ARROW);
    SetIndexStyle(1, DRAW_ARROW);
    SetIndexStyle(2, DRAW_ARROW);
    SetIndexStyle(3, DRAW_ARROW);

      SetIndexArrow(0,158);
      SetIndexArrow(1,158);
      SetIndexArrow(2,158);
      SetIndexArrow(3,158);

      SetIndexEmptyValue(0,EMPTY_VALUE);
      SetIndexEmptyValue(1,EMPTY_VALUE);
      SetIndexEmptyValue(2,EMPTY_VALUE);
      SetIndexEmptyValue(3,EMPTY_VALUE);
   }
   else
   {
   SetIndexStyle(0, DRAW_HISTOGRAM);
   SetIndexStyle(1, DRAW_HISTOGRAM);
   SetIndexStyle(2, DRAW_HISTOGRAM);
   SetIndexStyle(3, DRAW_HISTOGRAM);
   }
   SetIndexStyle(4, DRAW_LINE);
   SetIndexStyle(5, DRAW_LINE);
  
   SetIndexBuffer(0, buf_up1);
   SetIndexBuffer(1, buf_up2);
   SetIndexBuffer(2, buf_dn1);
   SetIndexBuffer(3, buf_dn2);


   SetIndexBuffer(4, g_ibuf_132);
   SetIndexBuffer(5, g_ibuf_128);
   SetIndexBuffer(6, g_ibuf_124);
   
   
   SetIndexLabel(0, "");
   SetIndexLabel(1, "");
   SetIndexLabel(2, "");
   SetIndexLabel(3, "");
   SetIndexLabel(4, "");//Upper Limit
   SetIndexLabel(5, "");//Lower Limit
   SetIndexLabel(6, "RF Linear Value");


   return (0);
}

int start() {
   int l_ind_counted_0 = IndicatorCounted();
   double ld_4 = 0;
   double ld_12 = 0;
   double ld_20 = 0;
   if (l_ind_counted_0 < 0) return (-1);
   int li_28 = Bars - l_ind_counted_0;
   if (li_28 > gd_136) li_28 = gd_136;
   if (li_28 > Bars - 34 - 1) li_28 = Bars - 34 - 1;
   for (int i = 0; i <= li_28; i++) {
      ld_4 = 100.0 * (iMA(NULL, 0, 3, 0, MODE_LWMA, PRICE_CLOSE, i) - iMA(NULL, 0, 34, 0, MODE_LWMA, PRICE_CLOSE, i)) * iATR(NULL, 0, 3, i);
      ld_12 = ld_4 / iMA(NULL, 0, 34, 0, MODE_LWMA, PRICE_CLOSE, i) / iATR(NULL, 0, 34, i);
      ld_20 = (MathExp(2.0 * ld_12) - 1.0) / (MathExp(2.0 * ld_12) + 1.0);
      g_ibuf_124[i] = ld_20;
      g_ibuf_128[i] = -gd_116;
      g_ibuf_132[i] = gd_116;

      buf_up1[i]=EMPTY_VALUE; buf_up2[i]=EMPTY_VALUE; buf_dn1[i]=EMPTY_VALUE; buf_dn2[i]=EMPTY_VALUE;

      if (ld_20>0){ if (ld_20<gd_116)   {  buf_up1[i]=ld_20;         buf_up2[i]=EMPTY_VALUE; }
                    else                {  buf_up2[i]=ld_20;         buf_up1[i]=EMPTY_VALUE; }
                                           buf_dn1[i]=EMPTY_VALUE;   buf_dn2[i]=EMPTY_VALUE;
                  }

      else        { if (ld_20>-gd_116)  {  buf_dn1[i]=ld_20;         buf_dn2[i]=EMPTY_VALUE; }
                    else                {  buf_dn2[i]=ld_20;         buf_up1[i]=EMPTY_VALUE; }
                                           buf_up1[i]=EMPTY_VALUE;   buf_up2[i]=EMPTY_VALUE;
                  }


   }
   return (0);
}