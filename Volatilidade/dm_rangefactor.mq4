/*
   Generated by EX4-TO-MQ4 decompiler ONE FILE V4.0.218.3
   EX4 ID : 04E20A41724C2645BAEB3FDF008C44EC
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2007, Dean Malone"
#property link      "www.compassfx.com"

#property indicator_separate_window
#property indicator_buffers 3
#property indicator_color1 Fuchsia
#property indicator_color2 DodgerBlue
#property indicator_color3 DodgerBlue

extern string Custom_Indicator = "Range_Factor";
extern string Copyright = "© 2007, Dean Malone";
extern string Web_Address = "www.compassfx.com";
extern double MyRange = 0.0;
extern string MyRange_Help = "If MyRange = 0.0 - defaults used (M1=0.01,M5=0.02,M15=0.04,M30=0.06,H1=0.08,H4=0.14,D1=0.4)";
double gd_116;
double g_ibuf_124[];
double g_ibuf_128[];
double g_ibuf_132[];
double gd_136 = 500.0;

int init() {
   switch (Period()) {
   case PERIOD_MN1:
      gd_116 = 0.5;
      break;
   case PERIOD_W1:
      gd_116 = 0.5;
      break;
   case PERIOD_D1:
      gd_116 = 0.4;
      break;
   case PERIOD_H4:
      gd_116 = 0.14;
      break;
   case PERIOD_H1:
      gd_116 = 0.08;
      break;
   case PERIOD_M30:
      gd_116 = 0.06;
      break;
   case PERIOD_M15:
      gd_116 = 0.04;
      break;
   case PERIOD_M5:
      gd_116 = 0.02;
      break;
   case PERIOD_M1:
      gd_116 = 0.01;
   }
   if (MyRange != 0.0) gd_116 = MyRange;
   IndicatorShortName("Range_Factor | www.compassfx.com  ");
   SetIndexStyle(0, DRAW_LINE);
   SetIndexStyle(1, DRAW_LINE);
   SetIndexStyle(2, DRAW_LINE);
   SetIndexBuffer(0, g_ibuf_124);
   SetIndexBuffer(1, g_ibuf_132);
   SetIndexBuffer(2, g_ibuf_128);
   SetIndexLabel(0, "RF Linear Value");
   SetIndexLabel(1, "Upper Limit");
   SetIndexLabel(2, "Lower Limit");
   return (0);
}

int start() {
   int l_ind_counted_0 = IndicatorCounted();
   double ld_4 = 0;
   double ld_12 = 0;
   double ld_20 = 0;
   if (l_ind_counted_0 < 0) return (-1);
   int li_28 = Bars - l_ind_counted_0;
   if (li_28 > gd_136) li_28 = gd_136;
   if (li_28 > Bars - 34 - 1) li_28 = Bars - 34 - 1;
   for (int li_32 = 0; li_32 <= li_28; li_32++) {
      ld_4 = 100.0 * (iMA(NULL, 0, 3, 0, MODE_LWMA, PRICE_CLOSE, li_32) - iMA(NULL, 0, 34, 0, MODE_LWMA, PRICE_CLOSE, li_32)) * iATR(NULL, 0, 3, li_32);
      ld_12 = ld_4 / iMA(NULL, 0, 34, 0, MODE_LWMA, PRICE_CLOSE, li_32) / iATR(NULL, 0, 34, li_32);
      ld_20 = (MathExp(2.0 * ld_12) - 1.0) / (MathExp(2.0 * ld_12) + 1.0);
      g_ibuf_124[li_32] = ld_20;
      g_ibuf_128[li_32] = -gd_116;
      g_ibuf_132[li_32] = gd_116;
   }
   return (0);
}
