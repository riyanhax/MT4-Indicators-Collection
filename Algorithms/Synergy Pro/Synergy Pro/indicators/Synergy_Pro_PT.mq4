/*
   Generated by EX4-TO-MQ4 decompiler V4.0.427.4 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2012, Dean Malone"
#property link      "http://www.synergyprotrader.com"

#property indicator_chart_window
#property indicator_buffers 4
#property indicator_color1 Black
#property indicator_color2 Black
#property indicator_color3 RoyalBlue
#property indicator_color4 Fuchsia

#import "CompassFX.dll"
   string gGrab(string a0, string a1);
#import "synergy_pro.dll"
   string returnReg(string a0, string a1);
#import

int g_file_76;
bool gi_80 = FALSE;
string gs_unused_84;
double gd_unused_92 = 1.1;
extern string Custom_Indicator = "Synergy Pro Price Trend";
extern string Copyright = "© 2012, Dean Malone";
extern string Web_Address = "www.synergyprotrader.com";
extern string Color = "=== Color settings ===";
extern color Alert_Long_Color = RoyalBlue;
extern color Alert_Short_Color = Fuchsia;
extern string Alert_mode = "=== Alert setting ===";
extern string Enable_Alert = "Off";
int g_period_156 = 5;
int g_period_160 = 13;
int g_ma_method_164 = MODE_LWMA;
int g_applied_price_168 = PRICE_TYPICAL;
int g_period_172 = 13;
int g_applied_price_176 = PRICE_TYPICAL;
double g_ibuf_180[];
double g_ibuf_184[];
double g_ibuf_188[];
double g_ibuf_192[];
double g_ibuf_196[];
bool gi_200 = FALSE;
string gs_nothing_204 = "nothing";
datetime g_time_212;

int f0_3() {
   int str2int_0;
   bool li_4;
   int li_8;
   g_file_76 = FileOpen("synergy_d.bin", FILE_CSV|FILE_READ);
   if (g_file_76 < 1) li_4 = FALSE;
   else {
      str2int_0 = StrToInteger(FileReadString(g_file_76));
      FileClose(g_file_76);
      li_4 = TRUE;
   }
   if (TimeLocal() - str2int_0 >= 86400 || li_4 == FALSE) {
      li_8 = f0_0();
      switch (li_8) {
      case 0:
         g_file_76 = FileOpen("synergy_d.bin", FILE_WRITE, 8);
         if (g_file_76 < 1) {
            Print("Cannot open password cache!");
            return (0);
         }
         FileWrite(g_file_76, TimeLocal());
         FileClose(g_file_76);
         break;
      case 1:
         Alert("Invalid software key provided!! Please re-install the software with the correct key.");
         gi_80 = TRUE;
         break;
      case 4:
         Alert("Your account has been disabled! Please contact support@compassfx.com");
         gi_80 = TRUE;
         break;
      case 5:
         Alert("Server error!! Please make sure you are connected to the Internet and try again.");
         gi_80 = TRUE;
         break;
      case 6:
         Alert("No key found in your registry (could be a bad installation)! Please re-install Synergy.");
         gi_80 = TRUE;
      }
   }
   return (0);
}

int f0_0() {
   string ls_unused_0;
   string ls_unused_8;
   string ls_unused_16;
   string ls_24 = returnReg("Software\\CompassFX\\Synergy", "key");
   if (ls_24 == "") return (6);
   string ls_32 = "key=" + ls_24;
   string ls_40 = gGrab("http://www.compassfx.com/synergy_scripts/s_login.php", ls_32);
   Print("Result -- ", ls_40);
   if (StringSubstr(ls_40, 0, 1) == "0") {
      gs_unused_84 = ls_40;
      return (0);
   }
   if (StringSubstr(ls_40, 0, 1) == "1") return (1);
   if (StringSubstr(ls_40, 0, 1) == "4") return (4);
   return (5);
}

string f0_2() {
   string ls_ret_0 = "no info";
   switch (Period()) {
   case PERIOD_MN1:
      ls_ret_0 = " on monthly chart";
      break;
   case PERIOD_W1:
      ls_ret_0 = " on weekly chart";
      break;
   case PERIOD_D1:
      ls_ret_0 = " on daily chart";
      break;
   case PERIOD_H4:
      ls_ret_0 = " on 4-hour chart";
      break;
   case PERIOD_H1:
      ls_ret_0 = " on 1-hour chart";
      break;
   case PERIOD_M30:
   case PERIOD_M15:
   case PERIOD_M5:
   case PERIOD_M1:
      ls_ret_0 = "on " + Period() + "-minute chart.";
   }
   return (ls_ret_0);
}

int init() {
   HideTestIndicators(TRUE);
   IndicatorBuffers(5);
   SetIndexBuffer(0, g_ibuf_180);
   SetIndexBuffer(1, g_ibuf_184);
   SetIndexBuffer(2, g_ibuf_188);
   SetIndexBuffer(3, g_ibuf_192);
   SetIndexBuffer(4, g_ibuf_196);
   SetIndexStyle(0, DRAW_NONE);
   SetIndexStyle(1, DRAW_NONE);
   SetIndexStyle(2, DRAW_ARROW, EMPTY, 3, Alert_Long_Color);
   SetIndexArrow(2, SYMBOL_ARROWUP);
   SetIndexStyle(3, DRAW_ARROW, EMPTY, 3, Alert_Short_Color);
   SetIndexArrow(3, SYMBOL_ARROWDOWN);
   SetIndexLabel(0, NULL);
   SetIndexLabel(1, NULL);
   SetIndexLabel(2, NULL);
   SetIndexLabel(3, NULL);
   IndicatorShortName("Synergy_Pro_PT");
   string ls_0 = f0_1(Enable_Alert);
   if (StringFind(ls_0, "ON") != -1) gi_200 = TRUE;
   else gi_200 = FALSE;
   //f0_3();
   return (0);
}

int deinit() {
   return (0);
}

int start() {
   double ld_12;
   double ld_20;
   double irsi_28;
   double ld_36;
   if (gi_80) return (0);
   int li_0 = IndicatorCounted();
   if (li_0 < 0) return (-1);
   if (li_0 > 0) li_0--;
   int li_4 = MathMin(Bars - li_0, Bars - 1);
   for (int li_8 = li_4; li_8 >= 0; li_8--) {
      g_ibuf_180[li_8] = iMA(NULL, 0, g_period_156, 0, g_ma_method_164, g_applied_price_168, li_8);
      g_ibuf_184[li_8] = iMA(NULL, 0, g_period_160, 0, g_ma_method_164, g_applied_price_168, li_8);
      g_ibuf_188[li_8] = EMPTY_VALUE;
      g_ibuf_192[li_8] = EMPTY_VALUE;
      g_ibuf_196[li_8] = g_ibuf_196[li_8 + 1];
      ld_12 = NormalizeDouble(iMA(NULL, 0, 5, 1, MODE_SMMA, PRICE_HIGH, li_8), Digits);
      ld_20 = NormalizeDouble(iMA(NULL, 0, 5, 1, MODE_SMMA, PRICE_LOW, li_8), Digits);
      irsi_28 = iRSI(NULL, 0, g_period_172, g_applied_price_176, li_8);
      ld_36 = g_ibuf_180[li_8] - g_ibuf_184[li_8];
      if (ld_36 > 0.0 && irsi_28 > 50.0) g_ibuf_196[li_8] = 1;
      if (ld_36 < 0.0 && irsi_28 < 50.0) g_ibuf_196[li_8] = -1;
      if (g_ibuf_196[li_8] != g_ibuf_196[li_8 + 1]) {
         if (g_ibuf_196[li_8] == 1.0) {
            g_ibuf_188[li_8] = ld_20 - 0.6 * (ld_12 - ld_20);
            continue;
         }
         g_ibuf_192[li_8] = ld_12 + 0.6 * (ld_12 - ld_20);
      }
   }
   if (gi_200) {
      if (g_ibuf_196[1] != g_ibuf_196[2]) {
         if (g_ibuf_196[1] == 1.0) f0_4(": Synergy PT Long signal ");
         else f0_4(": Synergy PT Short signal ");
      }
   }
   return (0);
}

string f0_1(string as_0) {
   int li_24;
   string ls_ret_8 = "";
   int str_len_16 = StringLen(as_0);
   for (int li_20 = 0; li_20 < str_len_16; li_20++) {
      li_24 = StringGetChar(as_0, li_20);
      if (li_24 >= 'a' && li_24 <= 'z') li_24 -= 32;
      ls_ret_8 = StringSetChar(ls_ret_8, li_20, li_24);
   }
   return (ls_ret_8);
}

void f0_4(string as_0) {
   string str_concat_8;
   if (gs_nothing_204 != as_0 || g_time_212 != Time[0]) {
      gs_nothing_204 = as_0;
      g_time_212 = Time[0];
      str_concat_8 = StringConcatenate(Symbol(), as_0, f0_2());
      if (gi_200) Alert(str_concat_8);
   }
}