/*
   Generated by EX4-TO-MQ4 decompiler V4.0.427.4 [-]
   Website: https://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2012, Dean Malone"
#property link      "www.synergyprotrader.com"

#property indicator_chart_window
#property indicator_buffers 4
#property indicator_color1 Green
#property indicator_color2 Red
#property indicator_color3 Yellow
#property indicator_color4 Yellow

#import "CompassFX.dll"
   string gGrab(string a0, string a1);
#import "synergy_pro.dll"
   string returnReg(string a0, string a1);
#import

int g_file_76;
bool gi_80 = FALSE;
string gs_unused_84;
double gd_unused_92 = 1.1;
extern string Custom_Indicator = "Synergy Pro APB Arrows";
extern string Copyright = "© 2012, Dean Malone";
extern string Web_Address = "www.synergyprotrader.com";
extern string Color = "=== Color settings ===";
extern color Arrow_Up_Color = Green;
extern color Arrow_Down_Color = Red;
extern color Arrow_Caution_Color = Yellow;
extern int Arrow_Size = 0;
extern string Alert_mode = "=== Alert settings ===";
extern string Enable_Alert = "Off";
double g_ibuf_164[];
double g_ibuf_168[];
double g_ibuf_172[];
double g_ibuf_176[];
double g_icustom_180;
double g_icustom_188;
double g_icustom_196;
double g_icustom_204;
double g_icustom_212;
double g_icustom_220;
double g_icustom_228;
double g_icustom_236;
double g_icustom_244;
double gd_252;
double gd_260;
double gd_268;
double g_icustom_276;
double g_icustom_284;
double g_icustom_292;
double gda_300[5];
double gda_304[5];
double gda_unused_308[5];
double gd_312 = 0.0;
double gd_320 = 0.0;
double g_ibuf_328[];
double g_ibuf_332[];
double g_ibuf_336[];
double g_ibuf_340[];
double g_ibuf_344[];
double g_ibuf_348[];
double g_ibuf_352[];
double g_ibuf_356[];
double g_icustom_360;
double g_icustom_368;
double g_icustom_376;
double g_ima_384;
int gi_392 = 0;
bool gi_396;
bool gi_400;
int g_time_404 = -1;
bool gi_408 = TRUE;
bool gi_412 = FALSE;
string gs_416;
int g_time_424 = 0;
int gi_unused_428 = 0;

int f0_5() {
   int str2int_0;
   bool li_4;
   int li_8;
   g_file_76 = FileOpen("synergy_d.bin", FILE_CSV|FILE_READ);
   if (g_file_76 < 1) li_4 = FALSE;
   else {
      str2int_0 = StrToInteger(FileReadString(g_file_76));
      FileClose(g_file_76);
      li_4 = TRUE;
   }
   if (TimeLocal() - str2int_0 >= 86400 || li_4 == FALSE) {
      li_8 = f0_0();
      switch (li_8) {
      case 0:
         g_file_76 = FileOpen("synergy_d.bin", FILE_WRITE, 8);
         if (g_file_76 < 1) {
            Print("Cannot open password cache!");
            return (0);
         }
         FileWrite(g_file_76, TimeLocal());
         FileClose(g_file_76);
         break;
      case 1:
         Alert("Invalid software key provided!! Please re-install the software with the correct key.");
         gi_80 = TRUE;
         break;
      case 4:
         Alert("Your account has been disabled! Please contact support@compassfx.com");
         gi_80 = TRUE;
         break;
      case 5:
         Alert("Server error!! Please make sure you are connected to the Internet and try again.");
         gi_80 = TRUE;
         break;
      case 6:
         Alert("No key found in your registry (could be a bad installation)! Please re-install Synergy.");
         gi_80 = TRUE;
      }
   }
   return (0);
}

int f0_0() {
   string ls_unused_0;
   string ls_unused_8;
   string ls_unused_16;
   string ls_24 = returnReg("Software\\CompassFX\\Synergy", "key");
   if (ls_24 == "") return (6);
   string ls_32 = "key=" + ls_24;
   string ls_40 = gGrab("http://www.compassfx.com/synergy_scripts/s_login.php", ls_32);
   Print("Result -- ", ls_40);
   if (StringSubstr(ls_40, 0, 1) == "0") {
      gs_unused_84 = ls_40;
      return (0);
   }
   if (StringSubstr(ls_40, 0, 1) == "1") return (1);
   if (StringSubstr(ls_40, 0, 1) == "4") return (4);
   return (5);
}

int f0_6(int ai_0) {
   datetime time_4 = Time[ai_0];
   if (g_time_424 < time_4) {
      g_time_424 = time_4;
      return (1);
   }
   return (0);
}

string f0_3() {
   string ls_ret_0 = "no info";
   switch (Period()) {
   case PERIOD_MN1:
      ls_ret_0 = " on monthly chart";
      break;
   case PERIOD_W1:
      ls_ret_0 = " on weekly chart";
      break;
   case PERIOD_D1:
      ls_ret_0 = " on daily chart";
      break;
   case PERIOD_H4:
      ls_ret_0 = " on 4-hour chart";
      break;
   case PERIOD_H1:
      ls_ret_0 = " on 1-hour chart";
      break;
   case PERIOD_M30:
   case PERIOD_M15:
   case PERIOD_M5:
   case PERIOD_M1:
      ls_ret_0 = " on " + Period() + "-minute chart.";
   }
   return (ls_ret_0);
}

int deinit() {
   return (0);
}

int init() {
   string ls_4;
   if (Copyright == "Inertia_09374987" || Copyright == "5394834" || Copyright == "1032612") {
      IndicatorBuffers(8);
      SetIndexBuffer(0, g_ibuf_328);
      SetIndexEmptyValue(0, 0.0);
      SetIndexBuffer(1, g_ibuf_332);
      SetIndexEmptyValue(1, 0.0);
      SetIndexBuffer(2, g_ibuf_336);
      SetIndexEmptyValue(2, 0.0);
      SetIndexBuffer(3, g_ibuf_340);
      SetIndexEmptyValue(3, 0.0);
      SetIndexEmptyValue(4, 0.0);
      SetIndexBuffer(4, g_ibuf_344);
      SetIndexBuffer(5, g_ibuf_348);
      SetIndexEmptyValue(5, 0.0);
      SetIndexBuffer(6, g_ibuf_352);
      SetIndexBuffer(7, g_ibuf_356);
   }
   if (Copyright != "98w34988suesdfe" && (Copyright != "Inertia_09374987" && Copyright != "5394834" && Copyright != "1032612")) {
      switch (Period()) {
      case PERIOD_MN1:
         gd_260 = 0.005;
         break;
      case PERIOD_W1:
         gd_260 = 0.005;
         break;
      case PERIOD_D1:
         gd_260 = 0.005;
         break;
      case PERIOD_H4:
         gd_260 = 0.0014;
         break;
      case PERIOD_H1:
         gd_260 = 0.0008;
         break;
      case PERIOD_M30:
         gd_260 = 0.0006;
         break;
      case PERIOD_M15:
         gd_260 = 0.0004;
         break;
      case PERIOD_M5:
         gd_260 = 0.0002;
         break;
      case PERIOD_M1:
         gd_260 = 0.0001;
      }
      if (Digits < 4) gd_260 = 100.0 * gd_260;
      IndicatorBuffers(6);
      SetIndexBuffer(0, g_ibuf_164);
      SetIndexStyle(0, DRAW_ARROW, STYLE_SOLID, Arrow_Size, Arrow_Up_Color);
      SetIndexArrow(0, 233);
      SetIndexBuffer(1, g_ibuf_168);
      SetIndexStyle(1, DRAW_ARROW, STYLE_SOLID, Arrow_Size, Arrow_Down_Color);
      SetIndexArrow(1, 234);
      SetIndexBuffer(2, g_ibuf_172);
      SetIndexStyle(2, DRAW_ARROW, STYLE_SOLID, Arrow_Size, Arrow_Caution_Color);
      SetIndexArrow(2, 233);
      SetIndexBuffer(3, g_ibuf_176);
      SetIndexStyle(3, DRAW_ARROW, STYLE_SOLID, Arrow_Size, Arrow_Caution_Color);
      SetIndexArrow(3, 234);
      SetIndexLabel(0, NULL);
      SetIndexLabel(1, NULL);
      SetIndexLabel(2, NULL);
      SetIndexLabel(3, NULL);
      IndicatorShortName("Synergy_Pro_APB_Arrows");
      ls_4 = f0_1(Enable_Alert);
      if (StringFind(ls_4, "ON") != -1) gi_412 = TRUE;
      else gi_412 = FALSE;
   } else SetIndexBuffer(0, g_ibuf_164);
   //f0_5();
   return (0);
}

int start() {
   if (gi_80) return (0);
   if (Copyright == "Inertia_09374987" || Copyright == "5394834" || Copyright == "1032612") {
      f0_2();
      return (0);
   }
   int ind_counted_4 = IndicatorCounted();
   if (ind_counted_4 < 0) return (-1);
   int li_8 = Bars - ind_counted_4;
   if (li_8 > Bars - 34 - 1) li_8 = Bars - 34 - 1;
   else li_8--;
   for (int li_12 = li_8; li_12 >= 0; li_12--) {
      g_icustom_180 = iCustom(NULL, 0, "Synergy_Pro_APB", 6, li_12);
      g_icustom_188 = iCustom(NULL, 0, "Synergy_Pro_APB", 7, li_12);
      g_icustom_196 = iCustom(NULL, 0, "Synergy_Pro_APB", 0, li_12);
      g_icustom_204 = iCustom(NULL, 0, "Synergy_Pro_APB", 1, li_12);
      g_icustom_236 = iCustom(NULL, 0, "Synergy_Pro_APB", 2, li_12);
      g_icustom_244 = iCustom(NULL, 0, "Synergy_Pro_APB", 3, li_12);
      g_icustom_212 = iCustom(NULL, 0, "Synergy_Pro_TDI", 4, li_12);
      g_icustom_220 = iCustom(NULL, 0, "Synergy_Pro_TDI", 5, li_12);
      g_icustom_228 = iCustom(NULL, 0, "Synergy_Pro_TDI", 2, li_12);
      gd_252 = NormalizeDouble(iStdDev(NULL, 0, 7, 0, MODE_SMA, PRICE_CLOSE, li_12), Digits);
      gd_268 = NormalizeDouble(iCCI(NULL, 0, 14, PRICE_TYPICAL, li_12), Digits);
      if (gi_408) {
         g_icustom_276 = iCustom(NULL, 0, "Synergy_Pro_APB_Arrows", "", "Inertia_09374987", 0, li_12);
         g_icustom_292 = iCustom(NULL, 0, "Synergy_Pro_APB_Arrows", "", "Inertia_09374987", 1, li_12);
         g_icustom_284 = iCustom(NULL, 0, "Synergy_Pro_APB_Arrows", "", "Inertia_09374987", 2, li_12);
      }
      if (g_icustom_180 < g_icustom_188 && g_icustom_196 > g_icustom_204 && g_icustom_188 > g_icustom_236 && gd_252 > gd_260 && gd_268 >= 50.0 && g_icustom_212 > g_icustom_220 &&
         g_icustom_212 > g_icustom_228 || g_icustom_212 > 50.0 && g_ibuf_164[li_12] == EMPTY_VALUE) {
         if (gi_408) {
            if (g_ibuf_164[li_12] != EMPTY_VALUE && g_icustom_292 != 0.0 || g_icustom_284 != 0.0) {
               g_ibuf_172[li_12] = g_icustom_244 - (g_icustom_236 - g_icustom_244) / 2.0;
               g_ibuf_164[li_12] = EMPTY_VALUE;
            } else {
               if (g_ibuf_172[li_12] != EMPTY_VALUE && g_icustom_276 != 0.0) {
                  g_ibuf_164[li_12] = g_icustom_244 - (g_icustom_236 - g_icustom_244) / 2.0;
                  g_ibuf_172[li_12] = EMPTY_VALUE;
               }
            }
         }
         if (f0_6(li_12)) {
            if (gi_408) {
               if (g_icustom_292 != 0.0) g_ibuf_172[li_12] = g_icustom_244 - (g_icustom_236 - g_icustom_244) / 2.0;
               else g_ibuf_164[li_12] = g_icustom_244 - (g_icustom_236 - g_icustom_244) / 2.0;
            } else g_ibuf_164[li_12] = g_icustom_244 - (g_icustom_236 - g_icustom_244) / 2.0;
            gi_unused_428 = 1;
            if (gi_412 && li_12 == 0 && g_icustom_292 == 0.0 && Copyright != "987987987eee98797") Alert(Symbol() + ": Long conditon @ " + DoubleToStr(Ask, Digits) + f0_3());
         }
      }
      if (g_icustom_180 > g_icustom_188 && g_icustom_204 > g_icustom_196 && g_icustom_188 < g_icustom_244 && gd_252 > gd_260 && gd_268 <= -50.0 && g_icustom_212 < g_icustom_220 &&
         g_icustom_212 < g_icustom_228 || g_icustom_212 < 50.0 && g_ibuf_168[li_12] == EMPTY_VALUE) {
         if (gi_408) {
            if (g_ibuf_168[li_12] != EMPTY_VALUE && g_icustom_292 != 0.0 || g_icustom_276 != 0.0) {
               g_ibuf_176[li_12] = g_icustom_236 + (g_icustom_236 - g_icustom_244) / 2.0;
               g_ibuf_168[li_12] = EMPTY_VALUE;
            } else {
               if (g_ibuf_176[li_12] != EMPTY_VALUE && g_icustom_284 != 0.0) {
                  g_ibuf_168[li_12] = g_icustom_236 + (g_icustom_236 - g_icustom_244) / 2.0;
                  g_ibuf_176[li_12] = EMPTY_VALUE;
               }
            }
         }
         if (f0_6(li_12)) {
            if (gi_408) {
               if (g_icustom_292 != 0.0) g_ibuf_176[li_12] = g_icustom_236 + (g_icustom_236 - g_icustom_244) / 2.0;
               else g_ibuf_168[li_12] = g_icustom_236 + (g_icustom_236 - g_icustom_244) / 2.0;
            } else g_ibuf_168[li_12] = g_icustom_236 + (g_icustom_236 - g_icustom_244) / 2.0;
            gi_unused_428 = -1;
            if (gi_412 && li_12 == 0 && g_icustom_292 == 0.0 && Copyright != "987987987eee98797") Alert(Symbol() + ": Short condition @ " + DoubleToStr(Bid, Digits) + f0_3());
         }
      }
   }
   return (0);
}

string f0_1(string as_0) {
   int li_24;
   string ls_ret_8 = "";
   int str_len_16 = StringLen(as_0);
   for (int li_20 = 0; li_20 < str_len_16; li_20++) {
      li_24 = StringGetChar(as_0, li_20);
      if (li_24 >= 'a' && li_24 <= 'z') li_24 -= 32;
      ls_ret_8 = StringSetChar(ls_ret_8, li_20, li_24);
   }
   return (ls_ret_8);
}

void f0_2() {
   gs_416 = "Synergy_Pro_APB_Arrows";
   if (Copyright == "5394834") {
      f0_8();
      return;
   }
   if (Copyright == "1032612") {
      f0_4();
      return;
   }
   int ind_counted_0 = IndicatorCounted();
   int li_4 = Bars - ind_counted_0;
   if (li_4 > 0) li_4--;
   if (li_4 >= 0) {
      for (int li_8 = li_4; li_8 >= 0; li_8--) {
         g_icustom_360 = iCustom(NULL, 0, gs_416, "", "5394834", 3, li_8);
         g_icustom_368 = iCustom(NULL, 0, gs_416, "", "5394834", 4, li_8);
         g_icustom_376 = iCustom(NULL, 0, gs_416, "", "5394834", 5, li_8);
         g_ima_384 = iMA(Symbol(), 0, 5, 0, MODE_SMMA, PRICE_MEDIAN, li_8);
         g_icustom_180 = iCustom(NULL, 0, gs_416, "", "1032612", 6, li_8);
         g_icustom_188 = iCustom(NULL, 0, gs_416, "", "1032612", 7, li_8);
         gi_396 = FALSE;
         gi_400 = FALSE;
         if (g_icustom_360 != 0.0 && g_icustom_188 >= g_ima_384 && g_icustom_188 > g_icustom_180) {
            g_ibuf_328[li_8] = 1;
            g_ibuf_336[li_8] = 0;
            gi_396 = TRUE;
         }
         if (g_icustom_376 != 0.0 && g_icustom_188 <= g_ima_384 && g_icustom_188 < g_icustom_180) {
            g_ibuf_328[li_8] = 0;
            g_ibuf_336[li_8] = 1;
            gi_400 = TRUE;
         }
         if (gi_396 == FALSE && gi_400 == FALSE) {
            g_ibuf_332[li_8] = 1;
            g_ibuf_328[li_8] = 0;
            g_ibuf_336[li_8] = 0;
         } else g_ibuf_332[li_8] = 0;
      }
   }
}

void f0_8() {
   double ima_12;
   double ima_20;
   double ld_28;
   double ld_36;
   int ind_counted_0 = IndicatorCounted();
   int li_4 = Bars - ind_counted_0;
   if (li_4 > 0) li_4--;
   if (li_4 >= 0) {
      gd_312 = 0.2;
      gd_320 = 1.0 - gd_312;
      for (int li_8 = li_4; li_8 >= 0; li_8--) {
         if (g_time_404 == -1 || g_time_404 < Time[li_8]) {
            f0_7();
            g_time_404 = Time[li_8];
         }
         ima_12 = iMA(Symbol(), 0, 13, 0, MODE_EMA, PRICE_TYPICAL, li_8);
         ima_20 = iMA(Symbol(), 0, 13, 0, MODE_EMA, PRICE_TYPICAL, li_8 + 1);
         gda_300[0] = iMA(Symbol(), 0, 8, 0, MODE_EMA, PRICE_TYPICAL, li_8) - iMA(Symbol(), 0, 17, 0, MODE_EMA, PRICE_TYPICAL, li_8);
         gda_304[0] = gd_312 * gda_300[0] + gd_320 * gda_304[1];
         ld_28 = gda_300[0] - gda_304[0];
         ld_36 = gda_300[1] - gda_304[1];
         if (ima_12 > ima_20 && ld_28 > ld_36) g_ibuf_340[li_8] = 1;
         else g_ibuf_340[li_8] = 0.0;
         if (ima_12 < ima_20 && ld_28 < ld_36) g_ibuf_348[li_8] = 1;
         else g_ibuf_348[li_8] = 0.0;
         if (g_ibuf_340[li_8] == 0.0 && g_ibuf_348[li_8] == 0.0) g_ibuf_344[li_8] = 1;
         else g_ibuf_344[li_8] = 0.0;
      }
   }
}

void f0_4() {
   double ld_0;
   double ld_24;
   if (Bars > 10) {
      gi_392 = IndicatorCounted();
      if (gi_392 >= 0) {
         if (gi_392 > 0) gi_392--;
         for (int li_32 = Bars - gi_392 - 1; li_32 >= 0; li_32--) {
            ld_24 = NormalizeDouble((Open[li_32] + High[li_32] + Low[li_32] + Close[li_32]) / 4.0, Digits);
            ld_24 = (ld_24 + Close[li_32]) / 2.0;
            ld_0 = NormalizeDouble((g_ibuf_352[li_32 + 1] + (g_ibuf_356[li_32 + 1])) / 2.0, Digits);
            g_ibuf_352[li_32] = ld_0;
            g_ibuf_356[li_32] = ld_24;
         }
      }
   }
}

void f0_7() {
   gda_300[1] = gda_300[0];
   gda_300[0] = 0.0;
   gda_304[1] = gda_304[0];
   gda_304[0] = 0.0;
}